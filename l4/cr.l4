
# lexion
# Business --> business_2 from WordNet

# Business.value --> foo_42 from Sumo

# BusinessEntity.value --> foo_43 from WordNet


class Business (132) {
      # foo (234): Int
      # bar (346): Bool -> (Int,Int)
}

class LawRelatedService (0) extends Business {
}

class BusinessEntity (0) {
}

class Appointment (0) {
}

class Person (0) {
}

class LegalPractitioner (0) extends Person {
}

class LocumSolicitor (0) extends LegalPractitioner {
}

decl AssociatedWith: LegalPractitioner -> Appointment -> Bool
decl AssociatedWithApp: Appointment -> BusinessEntity -> Bool

# use the following declarations instead of the commented 'extends' classes ??
# decl LawRelatedService: Business -> Bool
# decl LocumSolicitor: LegalPractitioner -> Bool


# SECTION 34

rule <r1a>
for lpr: LegalPractitioner, app: Appointment
if (exists bsn : Business. AssociatedWithApp app bsn && IncompatibleDignity bsn)
then MustNotAcceptApp lpr app


# first condition of IF: neg. of precond of rule 1a
rule <r5>
# for lpr: LegalPractitioner, app: Appointment
# Integrated the fact LocumSolicitor lpr in the declaration
for lpr: LocumSolicitor, app: Appointment
if not (exists bsn : Business. AssociatedWith app bsn && IncompatibleDignity bsn) &&
   (forall bse : BusinessEntity. AssociatedWithApp app bse -->
                  not (exists srv : Business.  LawRelatedService srv && Provides bse srv) &&
                  ConditionsSecondSchedule lpr bse)
then MayAcceptApp lpr app

assert exists lpr: LegalPractitioner. exists app: Appointment. MayAcceptApp lpr app
